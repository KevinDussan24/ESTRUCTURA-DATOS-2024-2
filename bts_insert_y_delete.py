# -*- coding: utf-8 -*-
"""BTS insert y delete

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ThYMtMA6PCjxbQCrp7YykDxo4i6i9-B3
"""

// Clase para el nodo del árbol
class Node {
    int key;
    Node left, right;

    public Node(int item) {
        key = item;
        left = right = null;
    }
}

// Clase para el Árbol Binario de Búsqueda
class BST {
    Node root;

    public BST() {
        root = null;
    }

    // Método para insertar un nuevo nodo
    void insert(int key) {
        root = insertRec(root, key);
    }

    // Función recursiva para insertar un nuevo nodo
    Node insertRec(Node root, int key) {
        // Si el árbol está vacío, crea un nuevo nodo
        if (root == null) {
            root = new Node(key);
            return root;
        }

        // De lo contrario, recorre el árbol
        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);

        return root;
    }

    // Método para eliminar un nodo
    void delete(int key) {
        root = deleteRec(root, key);
    }

    // Función recursiva para eliminar un nodo
    Node deleteRec(Node root, int key) {
        // Caso base: si el árbol está vacío
        if (root == null)
            return root;

        // Recorre el árbol
        if (key < root.key)
            root.left = deleteRec(root.left, key);
        else if (key > root.key)
            root.right = deleteRec(root.right, key);
        else {
            // Nodo con solo un hijo o sin hijos
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            // Nodo con dos hijos: obtener el sucesor en orden (el más pequeño del subárbol derecho)
            root.key = minValue(root.right);

            // Eliminar el sucesor en orden
            root.right = deleteRec(root.right, root.key);
        }

        return root;
    }

    // Encuentra el valor mínimo en el árbol
    int minValue(Node root) {
        int minValue = root.key;
        while (root.left != null) {
            minValue = root.left.key;
            root = root.left;
        }
        return minValue;
    }

    // Método para recorrer el árbol en orden (in-order)
    void inorder() {
        inorderRec(root);
    }

    // Función recursiva para recorrer el árbol en orden
    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.key + " ");
            inorderRec(root.right);
        }
    }

    // Main para probar el código
    public static void main(String[] args) {
        BST tree = new BST();

        /* Inserción de nodos */
        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);

        System.out.println("Recorrido in-order del árbol:");
        tree.inorder();

        System.out.println("\n\nEliminando 20");
        tree.delete(20);
        System.out.println("Recorrido in-order del árbol:");
        tree.inorder();

        System.out.println("\n\nEliminando 30");
        tree.delete(30);
        System.out.println("Recorrido in-order del árbol:");
        tree.inorder();

        System.out.println("\n\nEliminando 50");
        tree.delete(50);
        System.out.println("Recorrido in-order del árbol:");
        tree.inorder();
    }
}

"""con los demas metodos

"""

