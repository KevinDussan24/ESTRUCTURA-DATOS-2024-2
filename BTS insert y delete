{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNdfP5+LHlVNZj73uI+ZSAF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"4Jqtlu43LfcI"},"outputs":[],"source":["// Clase para el nodo del árbol\n","class Node {\n","    int key;\n","    Node left, right;\n","\n","    public Node(int item) {\n","        key = item;\n","        left = right = null;\n","    }\n","}\n","\n","// Clase para el Árbol Binario de Búsqueda\n","class BST {\n","    Node root;\n","\n","    public BST() {\n","        root = null;\n","    }\n","\n","    // Método para insertar un nuevo nodo\n","    void insert(int key) {\n","        root = insertRec(root, key);\n","    }\n","\n","    // Función recursiva para insertar un nuevo nodo\n","    Node insertRec(Node root, int key) {\n","        // Si el árbol está vacío, crea un nuevo nodo\n","        if (root == null) {\n","            root = new Node(key);\n","            return root;\n","        }\n","\n","        // De lo contrario, recorre el árbol\n","        if (key < root.key)\n","            root.left = insertRec(root.left, key);\n","        else if (key > root.key)\n","            root.right = insertRec(root.right, key);\n","\n","        return root;\n","    }\n","\n","    // Método para eliminar un nodo\n","    void delete(int key) {\n","        root = deleteRec(root, key);\n","    }\n","\n","    // Función recursiva para eliminar un nodo\n","    Node deleteRec(Node root, int key) {\n","        // Caso base: si el árbol está vacío\n","        if (root == null)\n","            return root;\n","\n","        // Recorre el árbol\n","        if (key < root.key)\n","            root.left = deleteRec(root.left, key);\n","        else if (key > root.key)\n","            root.right = deleteRec(root.right, key);\n","        else {\n","            // Nodo con solo un hijo o sin hijos\n","            if (root.left == null)\n","                return root.right;\n","            else if (root.right == null)\n","                return root.left;\n","\n","            // Nodo con dos hijos: obtener el sucesor en orden (el más pequeño del subárbol derecho)\n","            root.key = minValue(root.right);\n","\n","            // Eliminar el sucesor en orden\n","            root.right = deleteRec(root.right, root.key);\n","        }\n","\n","        return root;\n","    }\n","\n","    // Encuentra el valor mínimo en el árbol\n","    int minValue(Node root) {\n","        int minValue = root.key;\n","        while (root.left != null) {\n","            minValue = root.left.key;\n","            root = root.left;\n","        }\n","        return minValue;\n","    }\n","\n","    // Método para recorrer el árbol en orden (in-order)\n","    void inorder() {\n","        inorderRec(root);\n","    }\n","\n","    // Función recursiva para recorrer el árbol en orden\n","    void inorderRec(Node root) {\n","        if (root != null) {\n","            inorderRec(root.left);\n","            System.out.print(root.key + \" \");\n","            inorderRec(root.right);\n","        }\n","    }\n","\n","    // Main para probar el código\n","    public static void main(String[] args) {\n","        BST tree = new BST();\n","\n","        /* Inserción de nodos */\n","        tree.insert(50);\n","        tree.insert(30);\n","        tree.insert(20);\n","        tree.insert(40);\n","        tree.insert(70);\n","        tree.insert(60);\n","        tree.insert(80);\n","\n","        System.out.println(\"Recorrido in-order del árbol:\");\n","        tree.inorder();\n","\n","        System.out.println(\"\\n\\nEliminando 20\");\n","        tree.delete(20);\n","        System.out.println(\"Recorrido in-order del árbol:\");\n","        tree.inorder();\n","\n","        System.out.println(\"\\n\\nEliminando 30\");\n","        tree.delete(30);\n","        System.out.println(\"Recorrido in-order del árbol:\");\n","        tree.inorder();\n","\n","        System.out.println(\"\\n\\nEliminando 50\");\n","        tree.delete(50);\n","        System.out.println(\"Recorrido in-order del árbol:\");\n","        tree.inorder();\n","    }\n","}\n"]},{"cell_type":"markdown","source":["con los demas metodos\n"],"metadata":{"id":"fxmENSQeLqkK"}},{"cell_type":"code","source":[],"metadata":{"id":"zCRsotnyLsCZ"},"execution_count":null,"outputs":[]}]}